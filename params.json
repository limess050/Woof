{"name":"Woof","tagline":"Woof's Model for Codeigniter - Less Easy Flexible","body":"# What's Woof?\r\nWoof is custom model for Codeigniter which's provides comfortable methods such as CRUD. It'll take an easy to use, short and absolutely it's flexible.\r\n\r\n***\r\n\r\n# Installation\r\nCopy file **Woof.php** to libraries folder and set auto load library in **config/autoload.php**\r\n\r\n```\r\n$autoload[‘libraries’] = array(‘woof’);\r\n```\r\n\r\n***\r\n\r\n# Implement your Model\r\nEvery models in your application must extends from **Woof** class. Afterward you must define attributes in attributeRule() and set database, table name and other in initialize() as example.\r\n\r\n```\r\nclass foo extends Woof\r\n{\r\n  protected function attributeRule()\r\n  {\r\n    return array(\r\n      // Define id field and set Primary key\r\n      array('name'=>'id', 'pk'=>true),\r\n      array('name'=>'fname'),\r\n      array('name'=>'sname')\r\n    );\r\n  }\r\n  protected function initialize()\r\n  {\r\n    // Set select database\r\n    $this->db = 'default'\r\n    // Set table name\r\n    $this->db = 'foo'\r\n  }\r\n}\r\n```\r\n\r\n**Note:** **pk** is sign to indicate that attribute is primary key. It'll combine with another method such as _findByPk()_, _updateByPk()_, _deleteByPk()_ if you not set those method will not work. By the way you can set pk attribute through **pkField** attribute in initialize().\r\n\r\n***\r\n\r\n# CRUD\r\nCRUD is basic function that interacting with database, It contains four functions such as CREATE, READ, UPDATE and DELETE.\r\n\r\n### insert() \r\nAdd single record to database. You can set value to attributes which you have defined in attributeRule() method.\r\n\r\n_Syntax_\r\n\r\n```\r\nbool insert();\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model('foo');\r\n$this->foo->fname = 'Petit';\r\n$this->foo->sname = 'Wong';\r\n$this->foo->insert();\r\n```\r\n\r\n\r\n### set()\r\nAlternative way to setting value through this method rather than put value directly to attribute\r\n\r\n_Syntax_\r\n\r\n```\r\nvoid set(fieldname, value);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->set(‘fname’, ‘Petit’);\r\n```\r\n\r\n### update()\r\nUpdate records by specific conditions. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nbool update(Mixed);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->fname = ‘Windy’;\r\n$this->foo->update(array(‘fname’=>’Petit’));\r\n```\r\n\r\n### updateByPk()\r\nChange data in record by specific primary key value\r\n\r\n_Syntax_\r\n\r\n```\r\nbool updateByPk(value);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->fname = ‘Windy’;\r\n$this->foo->updateByPk(1);\r\n```\r\n\r\n### delete()\r\nRemove records by specific conditions. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nbool delete(mixed $conditions);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->delete(array(‘fname’=>’Petit’));\r\n```\r\n\r\n### deleteByPk()\r\nRemove record by specific primary key value\r\n\r\n_Syntax_\r\n\r\n```\r\nbool deleteByPk(mixed $pkvalue);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->deleteByPk(1);\r\n```\r\n\r\n### find()\r\nGet single record by specific conditions. If result not found it’ll return blank object. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nobject find([mixed $conditions]  [, array $fieldsname]);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$row = $this->foo->find(array(‘id’=>1));\r\necho $row->fname . ‘ ‘ . $row->sname; // Petit Wong\r\n\r\n// You can also specific fields name\r\n$row = $this->foo->find(array(‘id=>1’), array(‘fname’));\r\necho $row->fname . ‘ ‘ . $row->sname; // Petit\r\n```\r\n\r\n### findAll()\r\nGet records by specific conditions. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\narray findAll([mixed $conditions] [, array $fieldsname]);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘product’);\r\n\r\n// Retrieve all records\r\n$this->product->findAll(); \r\n\r\n// Retrieve records that has type_id = 1\r\n$this->product->findAll(array(‘type_id’ => 1)); \r\n\r\n// Retrieve all records and select only product_id and productname fields\r\n$this->product->findAll(null, array(‘product_id’,’product_name’)); \r\n```\r\n\r\n### findByPk()\r\nGet a record by specific primary key value\r\n\r\n_Syntax_\r\n\r\n```\r\nobject findByPk(mixed $value [, array $fieldsname]);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$row = $this->foo->findByPk(1)\r\necho $row->fname . ‘ ‘ . $row->sname; // Petit Wong\r\n\r\n// Put fields parameter\r\n$row = $this->foo->findByPk(1, array(‘fname’);\r\necho $row->fname . ‘ ‘ . $row->sname // Petit\r\n```\r\n\r\n### findBySql()\r\nGet record using SQL query command;\r\n\r\n_Syntax_\r\n\r\n```\r\narray findBySql(string $sqlcommand);\r\n```\r\n\r\n_Usage_\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->findBySql(‘SELECT * FROM foo’);\r\n```\r\n\r\n### count()\r\nGet number of record in the table. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nnumber count([mixed $conditions]);\r\n```\r\n\r\n### max()\r\nGet maximun value of field. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nnumber max(string $fieldname [, mixed $conditions]);\r\n```\r\n\r\n***\r\n\r\n### min()\r\nGet minimum value of field. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nnumber min(string $fieldname [, mixed $conditions]);\r\n```\r\n\r\n### avg()\r\nGet average value of field. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nnumber avg(string $fieldname [, mixed $conditions]);\r\n```\r\n\r\n### sum()\r\nGet summary value of field. You can pass Array or Criteria object perform conditions. See also How to define conditions.\r\n\r\n_Syntax_\r\n\r\n```\r\nnumber sum(string $fieldname [, mixed $conditions]);\r\n```\r\n\r\n### insertId()\r\nGet last insert id of table\r\n\r\n### lastQuery()\r\nGet last SQL queryl command\r\n\r\n***\r\n\r\n# How to define command\r\nYou can direct access to db object which's Active Record object of Codeigniter and add command to query. By the way, there are several ways to assign command or condition by using Array or Criteria that hold your command. And now I'll show three ways how to assign command to query data.\r\n\r\n### 1) Direct through db object\r\nThe **db** is Active Record object’s Codeigniter. You can access through **db()** method to assign command.\r\n\r\n```\r\n$this->load->model(‘foo’);\r\n$this->foo->db()->select(‘*’);\r\n$this->foo->db()->where(‘field1 = 1’);\r\n```\r\n\r\n**Note:** If you notice, Nearly all of commands refer to Codeigniter's Active Record object. You can reference object [in this source](http://ellislab.com/codeigniter/user-guide/database/active_record.html).\r\n\r\n### 2) Use Array\r\nYou can assign command by using multiple array. The commands contain many of arrays which has different key that represent command to query data.\r\n\r\n```\r\n$criteria = array = (\r\n   \t      array(‘select’ => ‘*’),\r\n  \t      array(‘where’ => ‘field1 = 1’)\r\n            );\r\n```\r\n\r\n### 3) Use Criteria\r\nCriteria is similar Array, but Criteria is object.\r\n\r\n```\r\nCriteria is similar Array, but Criteria is object.\r\n$obj = new Criteria\r\n$obj->select = ‘*’;\r\n$obj->where = ‘field1 = 1’;\r\n```\r\n\r\n## List of command\r\n\r\n### select\r\nSelect field members.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->select = 'field1, field2, field3';\r\n$obj->select = array('field1, 'field2', 'field3');\r\n```\r\n\r\n### distinct\r\nDistinct value.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->distinct = true; // default false\r\n```\r\n\r\n### like\r\nSearch value by keyword.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->like = 'field1 : %value%';\r\n$obj->like = 'field1 : value : before'; // use before, after or both\r\n```\r\n\r\n### or_like\r\nSearch value by keyword and add \"OR\" operator.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->or_like = 'field1 : %value%';\r\n$obj->or_like = 'field1 : value : before'; // use before, after or both\r\n```\r\n\r\n### not_like\r\nSearch value not in specific keyword.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->not_like = 'field1 : %value%';\r\n$obj->not_like = 'field1 : value : before'; // use before, after or both\r\n```\r\n\r\n### or_not_like\r\nSearch value not in specific keyword and add \"OR\" operator.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->or_not_like = 'field1 : %value%';\r\n$obj->or_not_like = 'field1 : value : before'; // use before, after or both\r\n```\r\n\r\n### join\r\nJoin table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->join = 'table2 : table2.id = table1.id';\r\n\r\n// use join optional e.g. left, right, outer, inner, left outer and right outer\r\n$obj->join = 'table : table2.id = table1.id : left';\r\n```\r\n\r\n### left\r\nLeft join table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->left = 'table2 : table2.id = table1.id';\r\n```\r\n\r\n### right\r\nRight join table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->right = 'table2 : table2.id = table1.id';\r\n```\r\n\r\n### outer\r\nOuter join table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->outer = 'table2 : table2.id = table1.id';\r\n```\r\n\r\n### inner\r\nInner join table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->inner = 'table2 : table2.id = table1.id';\r\n```\r\n\r\n### left_outer\r\nLeft outer join table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->left_outer = 'table2 : table2.id = table1.id';\r\n```\r\n\r\n### right_outer\r\nRight outer join table.\r\n\r\n_Parameter format_\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->right_outer = 'table2 : table2.id = table1.id';\r\n```\r\n\r\n### where\r\nSet where conditions.\r\n\r\n```\r\n$criteria = array(\r\n  array('where' => 'field1 = value')\r\n);\r\n\r\n// Add multiple\r\n$criteria = array(\r\n  array('where' => 'field1 = value1'),\r\n  array('where' => 'field2 != value2')\r\n);\r\n```\r\n\r\n### or_where\r\nSet where conditions and add \"OR\" operator.\r\n\r\n```\r\n$criteria = array(\r\n  array('or_where' => 'field1 = value1')\r\n);\r\n```\r\n\r\n### where_in\r\nSet IN condition.\r\n\r\n```\r\n// Array format\r\n$criteria = array(\r\n  array('where_in' => 'field : (value1, value2, value3)')\r\n);\r\n\r\n// Criteria format\r\n$obj = new Criteria;\r\n$obj->where_in = 'field : (value1, value2, value3)';\r\n\r\n```\r\n\r\n### where_not_in\r\nSet NOT IN condition.\r\n\r\n```\r\n$criteria = array(\r\n  array('where_not_in' => 'field : (value1, value2, value3)')\r\n);\r\n```\r\n\r\n### or_where_not_in\r\nSet NOT IN condition and add \"OR\" operator.\r\n\r\n```\r\n$criteria = array(\r\n  array('or_where_not_in' => 'field : (value1, value2, value3)');\r\n);\r\n```\r\n\r\n### group_by\r\nGroup result by field.\r\n\r\n```\r\n$criteria = array(\r\n  array('group_by' => 'field1');\r\n);\r\n\r\n// Multiple field\r\n$criteria = array(\r\n  array('group_by' => array('field1', 'field2'))\r\n);\r\n```\r\n\r\n### having\r\nSet having command.\r\n\r\n```\r\n$criteria = array(\r\n  array('having' => 'field : value')\r\n);\r\n\r\n// Set prevent escaping\r\n$criteria = array(\r\n  array('having' => 'field : value : true')\r\n);\r\n```\r\n\r\n### or_having\r\nSet having command and add \"OR\" operator\r\n\r\n```\r\n$criteria = array(\r\n  array('or_having' => 'field : value')\r\n);\r\n```\r\n\r\n### order_by\r\nOrder by specific field\r\n\r\n```\r\n$obj = new Criteria;\r\n$obj->order_by = 'field ASC';\r\n\r\n// Multiple fields\r\n$obj = new Criteria;\r\n$obj->order_by = 'field1 ASC, field2 DESC';\r\n```\r\n\r\n### limit\r\nLimit number of record.\r\n\r\n```\r\n$criteria = array(\r\n  'limit' => 10\r\n);\r\n\r\n// Limit 20 rows and set start index at 10\r\n$criteria = array(\r\n  'limit' => '20, 10'\r\n);\r\n```\r\n\r\n### offset\r\nSet start index.\r\n\r\n```\r\n// Equality \"limit => '10,5'\"\r\n$criteria = array(\r\n  'limit' => 10,\r\n  'offset' => 5\r\n);\r\n```\r\n\r\n***\r\n\r\n# Binding Foreign Key\r\nWoof provide functional\r\n\r\n```\r\n$this->load->model('person');\r\n$row = $this->person->findByPk(1);\r\n\r\necho $row->id . '<br />';\r\necho $row->fname . ' ' . $row->sname . '<br />';\r\necho $row->state_id;\r\n\r\n/*\r\n * Suppose state_id is foreign key from state table and contain three fields\r\n * state_id, state_code and state_name.\r\n */\r\n\r\n// Just add () to make attribute to method\r\necho $row->state_id()->state_id . ' ' . $row->state_id()->state_name; // 1 texas\r\n```\r\n\r\n### How to define?\r\nYou can define foreign key attribute in attributeRule() and set binding to related class as show in example\r\n\r\n```\r\nclass person extends Woof\r\n{\r\n  protected function attributeRule()\r\n  {\r\n    return array(\r\n      array('name'=>'id', 'pk'=>true),\r\n      array('name'=>'fname'),\r\n      array('name'=>'sname'),\r\n      array('name'=>'state_id', 'fk'=>array(\r\n                                'class'=>'state', // related class\r\n                                'destAttr'=>'state_id' // related field\r\n                               )                                            \r\n    );\r\n  }\r\n\r\n  protected function initialize()\r\n  {\r\n    $this->db = 'default';\r\n    $this->tableName = 'person';\r\n  }\r\n}\r\n```\r\n\r\nThere's another way to bind foreign key by using bindFK() method. you can place in initailize().\r\n\r\n_Syntax_\r\n\r\n```\r\nbindFK(string $sourceAttr, string $destAttr, string $class [, string $path]);\r\n```\r\n\r\n* $sourceAttr - Attribute name that represent Foreign key in class.\r\n* $destAttr - Primary key name in related class\r\n* $class - Related class\r\n* $path - if model has sub folder, you can specify path here","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}